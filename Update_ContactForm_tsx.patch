Subject: [PATCH] Update ContactForm.tsx
---
Index: src/components/ContactForm.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/ContactForm.tsx b/src/components/ContactForm.tsx
--- a/src/components/ContactForm.tsx	(revision 6f85c0efc318f93a0167f6d1b9db76c901a9b463)
+++ b/src/components/ContactForm.tsx	(revision da044354df8e2f7a61c691fb6951e6ebb4466beb)
@@ -1,120 +1,94 @@
-"use client";
-
-import { useState } from "react";
+"// src/components/ContactForm.tsx
+'use client';
 
-type Props = { emailFallback: string };
+import React from 'react';
 
-export default function ContactForm({ emailFallback }: Props) {
-    const [status, setStatus] = useState<"idle" | "sending" | "ok" | "err">("idle");
-    const [msg, setMsg] = useState<string>("");
-
-    const SITE_KEY = process.env.NEXT_PUBLIC_TURNSTILE_SITE_KEY || "";
+export default function ContactForm() {
+  const [status, setStatus] = React.useState<'idle'| 'sending' | 'ok' | 'error'>('idle');
+  const [error, setError] = React.useState<string>('');
 
-    async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
-        e.preventDefault();
-        setStatus("sending");
-        setMsg("");
+  async function onSubmit(e: React.FormEvent<HTMLFormElement>) {
+    e.preventDefault();
+    setStatus('sending');
+    setError('');
+
+    const fd = new FormData(e.currentTarget);
 
-        const form = e.currentTarget;
-        const data = new FormData(form);
+    // Turnstile auto-injects a hidden input with this name:
+    const token =
+      (fd.get('cf-turnstile-response') as string | null) ??
+      (fd.get('token') as string | null) ??
+      '';
+
+    const body = {
+      name: (fd.get('name') as string) ?? '',
+      email: (fd.get('email') as string) ?? '',
+      phone: (fd.get('phone') as string) ?? '',
+      intent: (fd.get('intent') as string) ?? 'signature',
+      message: (fd.get('message') as string) ?? '',
+      token,
+    };
 
-        try {
-            const res = await fetch("/api/contact", { method: "POST", body: data });
-
-            // Robust parse: handle HTML error pages gracefully
-            const ct = res.headers.get("content-type") || "";
-            const raw = await res.text();
-            const payload = ct.includes("application/json") ? JSON.parse(raw) : null;
-
-            if (!res.ok) {
-                const hint = res.status === 404 ? "Contact endpoint not found (/api/contact)." : "";
-                throw new Error(payload?.error || hint || raw || "Failed to send");
-            }
-
-            setStatus("ok");
-            setMsg(payload?.message || "Thank you. We’ll be in touch shortly.");
-            form.reset();
-
-            // Reset Turnstile if present
-            // @ts-expect-error global
-            if (window.turnstile?.reset) window.turnstile.reset();
-        } catch (err: any) {
-            setStatus("err");
-            setMsg(err?.message || "Something went wrong. Please email us directly.");
-        }
-    }
+    try {
+      const res = await fetch('/api/contact', {
+        method: 'POST',
+        headers: { 'Content-Type': 'application/json' },
+        body: JSON.stringify(body),
+      });
+      const data = await res.json();
+      if (!res.ok || !data.ok) {
+        throw new Error(data?.error || `Bad response ${res.status}`);
+      }
+      setStatus('ok');
+      e.currentTarget.reset();
+    } catch (err) {
+      setStatus('error');
+      setError(err instanceof Error ? err.message : 'Unknown error');
+    }
+  }
 
-    return (
-        <form className="form" onSubmit={onSubmit}>
-            <div className="form-grid">
-                <div className="field">
-                    <label htmlFor="name" className="visually-hidden">Name</label>
-                    <input id="name" name="name" placeholder="name" required />
-                </div>
-
-                <div className="field">
-                    <label htmlFor="email" className="visually-hidden">Email</label>
-                    <input id="email" name="email" type="email" inputMode="email" autoComplete="email" placeholder="email" required />
-                </div>
-
-                <div className="field">
-                    <label htmlFor="phone" className="visually-hidden">Phone</label>
-                    <input id="phone" name="phone" type="tel" inputMode="tel" placeholder="phone (optional)" />
-                </div>
-
-                <div className="field">
-                    <label htmlFor="date" className="visually-hidden">Date</label>
-                    <input id="date" name="date" type="date" placeholder="date" />
-                </div>
-
-                <div className="field">
-                    <label htmlFor="location" className="visually-hidden">Location</label>
-                    <input id="location" name="location" placeholder="location (villa, yacht, salon)" />
-                </div>
-
-                <div className="field">
-                    <label htmlFor="guests" className="visually-hidden">Guests</label>
-                    <input id="guests" name="guests" type="number" min={1} max={100} placeholder="guests" />
-                </div>
-            </div>
-
-            <div className="chips" role="group" aria-label="Menu path">
-                <label className="chip">
-                    <input type="radio" name="path" value="signature" defaultChecked />
-                    <span>signature</span>
-                </label>
-                <label className="chip">
-                    <input type="radio" name="path" value="garden" />
-                    <span>garden</span>
-                </label>
-                <label className="chip">
-                    <input type="radio" name="path" value="salon" />
-                    <span>salon</span>
-                </label>
-            </div>
+  return (
+    <form onSubmit={onSubmit} className="grid" aria-label="Contact form">
+      <div className="grid">
+        <label>
+          name
+          <input name="name" type="text" required placeholder="Your full name" />
+        </label>
+        <label>
+          email
+          <input name="email" type="email" required placeholder="you@domain.com" />
+        </label>
+        <label>
+          phone <span className="muted">(optional)</span>
+          <input name="phone" type="tel" placeholder="+33 ..." />
+        </label>
+      </div>
 
-            <div className="field">
-                <label htmlFor="message" className="visually-hidden">Message</label>
-                <textarea id="message" name="message" placeholder="message" rows={6} required />
-            </div>
+      <fieldset className="options">
+        <legend>menu intent</legend>
+        <label><input type="radio" name="intent" value="signature" defaultChecked /> signature</label>
+        <label><input type="radio" name="intent" value="garden" /> garden</label>
+        <label><input type="radio" name="intent" value="salon" /> salon</label>
+      </fieldset>
 
-            {/* Cloudflare Turnstile */}
-            {SITE_KEY ? (
-                <div className="cf-turnstile" data-sitekey={SITE_KEY} />
-            ) : null}
+      <label>
+        message
+        <textarea name="message" rows={5} placeholder="Share details about date, guests, location…"></textarea>
+      </label>
 
-            <div className="cta">
-                <button className="btn primary" type="submit" disabled={status === "sending"}>
-                    {status === "sending" ? "sending…" : "send"}
-                </button>
-                <a className="btn" href={`mailto:${emailFallback}`}>email instead</a>
-            </div>
+      {/* Turnstile widget INSIDE the form so the hidden field is added */}
+      <div
+        className="cf-turnstile"
+        data-sitekey={process.env.NEXT_PUBLIC_TURNSTILE_SITE_KEY}
+        data-theme="light"
+      />
+
+      <button className="btn primary" disabled={status === 'sending'}>
+        {status === 'sending' ? 'sending…' : 'send'}
+      </button>
 
-            {status !== "idle" && (
-                <p className="note center-text" aria-live="polite" style={{ marginTop: 8 }}>
-                    {msg}
-                </p>
-            )}
-        </form>
-    );
-}
+      {status === 'ok' && <p className="sub" role="status">Thanks — we’ll reply shortly.</p>}
+      {status === 'error' && <p className="sub" role="alert">Error: {error}</p>}
+    </form>
+  );
+}
\ No newline at end of file
